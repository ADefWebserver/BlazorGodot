<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="BlazorGodot.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />

    <style>
        #canvas {
            display: block;
            margin: 0;
            color: white;
        }

            #canvas:focus {
                outline: none;
            }

        .godot {
            font-family: 'Noto Sans', 'Droid Sans', Arial, sans-serif;
            color: #e0e0e0;
            background-color: #3b3943;
            background-image: linear-gradient(to bottom, #403e48, #35333c);
            border: 1px solid #45434e;
            box-shadow: 0 0 1px 1px #2f2d35;
        }

        /* Status display */

        #status {
            position: absolute;
            left: 0;
            top: 0;
            right: 0;
            bottom: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            /* don't consume click events - make children visible explicitly */
            visibility: hidden;
        }

        #status-progress {
            width: 366px;
            height: 7px;
            color: #1B1C22;
            background-color: white;
            border: 1px solid #444246;
            padding: 1px;
            box-shadow: 0 0 2px 1px #1B1C22;
            border-radius: 2px;
            visibility: visible;
        }

        #status-progress-inner {
            height: 100%;
            width: 0;
            box-sizing: border-box;
            transition: width 0.5s linear;
            color: white;
            background-color: #202020;
            border: 1px solid #222223;
            box-shadow: 0 0 1px 1px #27282E;
            border-radius: 3px;
        }

        #status-indeterminate {
            height: 42px;
            visibility: visible;
            position: relative;
        }

            #status-indeterminate > div {
                width: 4.5px;
                height: 0;
                border-style: solid;
                border-width: 9px 3px 0 3px;
                color: white;
                border-color: #2b2b2b transparent transparent transparent;
                transform-origin: center 21px;
                position: absolute;
            }

                #status-indeterminate > div:nth-child(1) {
                    transform: rotate( 22.5deg);
                }

                #status-indeterminate > div:nth-child(2) {
                    transform: rotate( 67.5deg);
                }

                #status-indeterminate > div:nth-child(3) {
                    transform: rotate(112.5deg);
                }

                #status-indeterminate > div:nth-child(4) {
                    transform: rotate(157.5deg);
                }

                #status-indeterminate > div:nth-child(5) {
                    transform: rotate(202.5deg);
                }

                #status-indeterminate > div:nth-child(6) {
                    transform: rotate(247.5deg);
                }

                #status-indeterminate > div:nth-child(7) {
                    transform: rotate(292.5deg);
                }

                #status-indeterminate > div:nth-child(8) {
                    transform: rotate(337.5deg);
                }

        #status-notice {
            margin: 0 100px;
            line-height: 1.3;
            visibility: visible;
            padding: 4px 6px;
            visibility: visible;
        }
    </style>
    <link id='-gd-engine-icon' rel='icon' type='image/png' href='default.icon.png' />
    <link rel='apple-touch-icon' href='default.apple-touch-icon.png' />

    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script src="coi-serviceworker.js"></script>

    <script>
        window.receiveCallFromGodot = async (godotMessage) => {            
            DotNet.invokeMethodAsync('BlazorGodot', 'ReceiveCallFromGodot', godotMessage)
            .then((result) => {
                alert(result);
            })
            .catch((error) => {
                console.log("Error: ", error);
            });
        };
    </script>

    <script>
        window.GodotApp = {

            showApp: function (canvasElement, godotApplicationName, godotArgs) {

                const GODOT_CONFIG = {
                    "args": godotArgs,
                    "canvasResizePolicy": 1,
                    "executable": godotApplicationName,
                    "experimentalVK": false,
                    "focusCanvas": true,
                    "gdextensionLibs": []
                };

                const engine = new Engine(GODOT_CONFIG);

                const INDETERMINATE_STATUS_STEP_MS = 100;
                const statusProgress = document.getElementById('status-progress');
                const statusProgressInner = document.getElementById('status-progress-inner');
                const statusIndeterminate = document.getElementById('status-indeterminate');
                const statusNotice = document.getElementById('status-notice');

                let initializing = true;
                let statusMode = 'hidden';

                let animationCallbacks = [];
                function animate(time) {
                    animationCallbacks.forEach((callback) => callback(time));
                    requestAnimationFrame(animate);
                }

                requestAnimationFrame(animate);

                function animateStatusIndeterminate(ms) {
                    const i = Math.floor((ms / INDETERMINATE_STATUS_STEP_MS) % 8);
                    if (statusIndeterminate.children[i].style.borderTopColor === '') {
                        Array.prototype.slice.call(statusIndeterminate.children).forEach((child) => {
                            child.style.borderTopColor = '';
                        });
                        statusIndeterminate.children[i].style.borderTopColor = '#dfdfdf';
                    }
                }

                function setStatusMode(mode) {
                    if (statusMode === mode || !initializing) {
                        return;
                    }
                    [statusProgress, statusIndeterminate, statusNotice].forEach((elem) => {
                        elem.style.display = 'none';
                    });
                    animationCallbacks = animationCallbacks.filter(function (value) {
                        return (value !== animateStatusIndeterminate);
                    });
                    switch (mode) {
                        case 'progress':
                            statusProgress.style.display = 'block';
                            break;
                        case 'indeterminate':
                            statusProgress.style.display = 'block';
                            statusIndeterminate.style.display = 'block';
                            animationCallbacks.push(animateStatusIndeterminate);
                            break;
                        case 'notice':
                            statusNotice.style.display = 'block';
                            break;
                        case 'hidden':
                            break;
                        default:
                            throw new Error('Invalid status mode');
                    }
                    statusMode = mode;
                }

                function setStatusNotice(text) {
                    while (statusNotice.lastChild) {
                        statusNotice.removeChild(statusNotice.lastChild);
                    }
                    const lines = text.split('\n');
                    lines.forEach((line) => {
                        statusNotice.appendChild(document.createTextNode(line));
                        statusNotice.appendChild(document.createElement('br'));
                    });
                }

                function displayFailureNotice(err) {
                    const msg = err.message || err;
                    console.error(msg);
                    setStatusNotice(msg);
                    setStatusMode('notice');
                    initializing = false;
                }

                const missing = Engine.getMissingFeatures();
                if (missing.length !== 0) {
                    const missingMsg = 'Error\nThe following features required to run Godot projects on the Web are missing:\n';
                    displayFailureNotice(missingMsg + missing.join('\n'));
                } else {
                    setStatusMode('indeterminate');

                    engine.startGame({
                        'canvas': canvasElement,
                        'onProgress': function (current, total) {
                            setStatusMode('progress');
                            var progress = (current / 99999999);
                            if (progress > 0.99999999) {
                                progress = 0.99999999;
                            }
                            statusProgressInner.style.width = `${(current / 99999999) * 100}%`;
                            // wait for progress bar animation
                            setTimeout(() => {
                                setStatusMode('indeterminate');
                            }, 500);
                        },

                    }).then(() => {
                        setStatusMode('hidden');
                        initializing = false;
                    }, displayFailureNotice);
                }
            }
        }
    </script>

</body>

</html>
